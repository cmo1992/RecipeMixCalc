/*
 * The Calculation Form is used to select a company then a recipe and finally 
 * enter the weight of the mix and then press the Calculate button. then the
 * application will give a print out of the weights that are needed for that
 * mix. The user can save the output to a text file and them print copies of it.
 */
package AppInterface;

import DatabaseObj.Company;
import DatabaseObj.IngTorec;
import DatabaseObj.Rectocom;
import DbAccessObj.CompanyDAO;
import DbAccessObj.IngTorecDAO;
import DbAccessObj.RecipesDAO;
import DbAccessObj.RectocomDAO;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 * FrmCalculation.
 * Is used to select a company then a recipe and finally enter the weight of the
 * mix and then press the Calculate button. then the application will give a 
 * print out of the weights that are needed for that mix. The user can save the
 * output to a text file and them print copies of it.
 * @author cmo
 */
public class FrmCalculation extends javax.swing.JFrame {

    private String form;
    private FrmMenu frmMenu;

    /**
     * Creates new form FrmCalculation
     */
    public FrmCalculation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboRecipe = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        sprWeight = new javax.swing.JSpinner();
        btnCalc = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnBack = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        cboCompany = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        txtRecipei = new javax.swing.JScrollPane();
        txtRecipe = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 550));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 1, 24)); // NOI18N
        jLabel1.setText("  Calculate Recipe");

        jLabel2.setText("Recipe:");

        jLabel3.setText("Recipe Weight:");

        btnCalc.setText("Calculate");
        btnCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        cboCompany.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboCompanyItemStateChanged(evt);
            }
        });

        jLabel4.setText("Company:");

        txtRecipe.setColumns(20);
        txtRecipe.setRows(5);
        txtRecipei.setViewportView(txtRecipe);
        txtRecipe.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(342, 342, 342)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cboCompany, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cboRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sprWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(btnCalc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(txtRecipei, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboCompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(sprWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboRecipe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCalc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtRecipei, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnSave))
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
/**
 * btnBackActionPerformed.
 * This button takes the user back to the menu screen.
 * @param evt 
 */
   private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
       frmMenu.setVisible(true);
       this.setVisible(false);
   }//GEN-LAST:event_btnBackActionPerformed
/**
 * cboCompanyItemStateChanged.
 * When a company is selected from the cboCompany combo box it checks to make
 * sure it is greater than -1. If so it calls a function to update the
 * cboRecipe combo box.
 * @param evt 
 */
   private void cboCompanyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboCompanyItemStateChanged
       if (cboCompany.getSelectedIndex() > -1) {
           loadRbox(cboCompany.getItemAt(cboCompany.getSelectedIndex()).toString());
       }
   }//GEN-LAST:event_cboCompanyItemStateChanged
/**
 * btnCalcActionPerformed.
 * When the btnCalc button is clicked the company and recipe strings are pulled
 * out of their respective combo box and stored into string variables. Then the 
 * weight is stored into a integer variable and increased by 3% to calculate in
 * percent lost in the mixing process. Then the calc function is called to
 * calculate all the ingredience weights and they are stored in a ArrayList.
 * Then the FormatRec function is called and  that saves the formated string
 * that is then displayed to the user on the screen and used in saving the mix
 * to a text file.
 * 
 * NOTE: The form string does not look like it is formatted correctly on the
 * screen but when saved and opened in a text viewer everything lines up.
 * @param evt 
 */
    private void btnCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcActionPerformed
        ArrayList<RecIngStrct> list = new ArrayList<RecIngStrct>();
        String com = cboCompany.getItemAt(cboCompany.getSelectedIndex()).toString();
        String rec = cboRecipe.getItemAt(cboRecipe.getSelectedIndex()).toString();
        int weight = (Integer) sprWeight.getValue();
        weight *= 1.03;
        list = calc(com, rec, weight);
        form = formatRec(list, com, rec, weight);
        txtRecipe.setText(form);
    }//GEN-LAST:event_btnCalcActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        loadCbox();
    }//GEN-LAST:event_formWindowActivated

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveRecipe();
    }//GEN-LAST:event_btnSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCalculation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCalculation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCalc;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cboCompany;
    private javax.swing.JComboBox cboRecipe;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSpinner sprWeight;
    private javax.swing.JTextArea txtRecipe;
    private javax.swing.JScrollPane txtRecipei;
    // End of variables declaration//GEN-END:variables

    /**
     * @Method: getCreds
     * @Detail: This get the current user information and a reference to the
     * Menu form from the Menu form
     * @param inUserName
     * @param inFrmMenu
     */
    void getCreds(FrmMenu inFrmMenu) {
        frmMenu = inFrmMenu;
        txtRecipe.setText("");
        sprWeight.setValue(0);
    }

    /**
     * @Method: loadCbox
     * @Detail: This loads the company names in the Company combo box.
     */
    void loadCbox() {
        cboCompany.removeAllItems();
        CompanyDAO comdao = new CompanyDAO();
        ArrayList<Company> myComList = new ArrayList<Company>();
        try {
            for (Object em : (ArrayList) comdao.getList()) {
                myComList.add((Company) em);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
        }
        if (myComList.size() > 0) {
            for (int i = 0; i < myComList.size(); i++) {
                Company hashmap = myComList.get(i);
                cboCompany.addItem(hashmap.getComname());
            }
        }
        if (cboCompany.getItemCount() > 0) {
            cboCompany.setSelectedIndex(0);
        }
    }

    /**
     * @Method: loadRbox(String)
     * @Detail: This takes the company string and puts the recipes in the Recipe
     * combo box.
     * @param com String 
     */
    void loadRbox(String com) {
        cboRecipe.removeAllItems();
        RecipesDAO recdao = new RecipesDAO();
        RectocomDAO rtcdao = new RectocomDAO();
        CompanyDAO comdao = new CompanyDAO();
        ArrayList<Rectocom> myRTCList = new ArrayList<Rectocom>();
        try {
            //Pulling the Company Name out of the Combo Box
            System.out.println(com);
            //Getting the Company's index in the company Table.
            int cop = comdao.getindx(com);
            System.out.println(cop);
            myRTCList = rtcdao.getRec(cop);
            for (int i = 0; i < myRTCList.size(); i++) {
                System.out.println("######## Check ##########");
                String ad = recdao.getrec(myRTCList.get(i).getRecpk());
                System.out.println("######## Check ##########");
                cboRecipe.addItem(ad);
            }
        } catch (SQLException ex) {
            //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
        }
    }

    /**
     * @Method: calc(String, String, Int)
     * @Details: Calculates the amount of ingredients for the size of the 
     * selected recipe and returns a list of RecIngStrct objects. 
     * @param com String
     * @param rec String
     * @param weight int
     * @return ArrayList<RecIngStrct>
     */
    private ArrayList<RecIngStrct> calc(String com, String rec, int weight) {
        int comIndex, recIndex, recPK;

        IngTorecDAO itrdao = new IngTorecDAO();
        RecipesDAO recdao = new RecipesDAO();
        RectocomDAO rtcdao = new RectocomDAO();
        CompanyDAO comdao = new CompanyDAO();

        ArrayList<RecIngStrct> myIng = new ArrayList<RecIngStrct>();
        ArrayList<IngTorec> myItr = new ArrayList<IngTorec>();

        try {
            comIndex = comdao.getindx(com);
            recIndex = recdao.getindx(rec);
            recPK = rtcdao.getindx(recIndex, comIndex);
            myItr = itrdao.getRecipe(recPK);

            for (int i = 0; i < myItr.size(); i++) {
                RecIngStrct tp = new RecIngStrct(myItr.get(i), weight);
                myIng.add(tp);
            }

        } catch (SQLException ex) {
            //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
        }
        return myIng;

    }

    /**
     * @Method: formatRec(ArrayList<RecIngStrct>, String, String, int)
     * @Detail: Formats the output into a nice readable layout.
     * @param list ArrayList<RecIngStrct>
     * @param com String
     * @param rec String
     * @param weight Int
     * @return String
     */
    private String formatRec(ArrayList<RecIngStrct> list, String com, String rec, int weight) {
        String form = new String();
        form += "Recipe: " + rec + "\n";
        form += "Company: " + com + "\n";
        form += "Date: " + getDate() + "\n\n\n\n";
        form += "     Ingredients         Percent        Weight      No. of Bags       Remander\n";
        form += "================================================================================\n\n";

        for (RecIngStrct list1 : list) {
            String tp = list1.toString();
            form += tp + "\n\n";
        }

        form += "================================================================================\n";
        form += "                                                                        Pounds\n";
        form += "         Total Weight: " + weight + " lb\n\n\n";

        return form;
    }

    /**
     * @Method: addLotCodes
     * @Details: adds a section for lot codes to the output.
     * @return String
     */
    private String addLotCodes() {
        String form = new String();
        form += "Lot Codes:\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        form += "[_________________________________]\n\n";
        return form;
    }

    /**
     * @Method: saveRecipe
     * @Details: Saves the output to a text file and allows for the user to
     * print out.
     */
    private void saveRecipe() {
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FileOutputStream stream = null;
            PrintStream out = null;
            try {
                File file = chooser.getSelectedFile();
                stream = new FileOutputStream(file);
                out = new PrintStream(stream);
                out.print(form + addLotCodes());                  //This will overwrite existing contents

            } catch (Exception ex) {
                //do something
            } finally {
                try {
                    if (stream != null) {
                        stream.close();
                    }
                    if (out != null) {
                        out.close();
                    }
                } catch (Exception ex) {
                    //do something
                }
            }
        }
        Desktop desk;
        if (Desktop.isDesktopSupported()){
            desk = Desktop.getDesktop();
            try {
                desk.open(chooser.getSelectedFile());
            } catch (IOException ex) {
                Logger.getLogger(FrmCalculation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * @Method: getDate
     * @Details: gets the date and formats it MM/dd/yyyy.
     * @return String
     */
    private String getDate() {
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        Date date = new Date();
        return dateFormat.format(date);
    }
}